// AE Project optimized by removing separate Long, Medium and Short name comps, and just // using layers firstname and lastname in the main Player Names comp. This eliminates// a lot of unnecessary comp duplicating, hopefully speeding up script preformance// and freeing some working memory.var proj = app.project;var renderCompName = "Name_Animation_Render";var workCompName = "Work_comp";var compItemSelect, renderItemSelect, searchItemSelect, nameCopyComp, playerNames;var namesList = [];var outlineItem, nameLong, nameMed, nameShort, panel05, changedPanel;var name, namePair, workingComp;var renderingComp, changedOutline;var outlineSize; // Size of font for the Outline Font comp, based on length of namevar lNamePx; // Size of font for player Last Name, based on length of namevar fNamePos; // Y position of player First Name, based on length of namevar lNamePos; // Y position of player Last Name, based on length of name// create undo groupapp.beginUndoGroup("Text File Versioning");// step through all project items to find the comps we're interested in duplicating, and // assign them to variablesfor(var i = 1; i <= proj.numItems; i++){       switch(proj.item(i).name){        case renderCompName:            renderItemSelect = proj.item(i);            break;        case workCompName:            compItemSelect = proj.item(i);            break;        case "NAME_OUTLINE":            outlineItem = proj.item(i);            break;        case "Player Names":            playerNames = proj.item(i);            break;        case "PANEL 05":            panel05 = proj.item(i);    }  }// Prompt user to select text filevar myFile = File.openDialog("Please select input text file.");if(myFile != null){    // open file    var fileOK = myFile.open("r");        while(!myFile.eof){            name = myFile.readln();            namePair = name.split(", "); // the delimiter between First and Last names in the text file            namesList.push([namePair[0], namePair[1]]);    }        myFile.close();}// Make project folders to hold the versions and millions of precompsvar newFolder = proj.items.addFolder("Versions");var hidePrecomps = proj.items.addFolder("zz_DupPrecomps");// loop through the list of names "namesList"for(var i = 0; i< namesList.length; i++){    // duplicate the necessary comps and assign the objects to variables        renderingComp = renderItemSelect.duplicate();        workingComp = compItemSelect.duplicate();    changedOutline = outlineItem.duplicate();    nameCopyComp = playerNames.duplicate();    changedPanel = panel05.duplicate();        workingComp.parentFolder = hidePrecomps;    changedOutline.parentFolder = hidePrecomps;    nameCopyComp.parentFolder = hidePrecomps;    changedPanel.parentFolder = hidePrecomps;   // DECIDE WHETHER TO USE SHORT, MEDIUM, OR LONG NAME COMP// and set font size for the outline font at the same time    if (namesList[i][1].length < 5){        // duplicate nameShort as changedNameComp        outlineSize = 570;        lNamePx = 134;        fNamePos = [653,352];        lNamePos = [1005,718];    }else if (namesList[i][1].length < 8) {        // duplicate nameMed as changedNameComp        outlineSize = 520;        lNamePx = 89;        fNamePos = [588,411];        lNamePos = [992,657];    }else{        //duplicate nameLong as changedNameComp        outlineSize = 470;        lNamePx = 62;        fNamePos = [730,410];        lNamePos = [948,585];}        // put the duplicate comp in the "Versions" folder    renderingComp.parentFolder = newFolder;    // replace "Work_comp" with "Work_Comp 2" (like option_drag)    renderingComp.layer(workCompName).replaceSource(workingComp, true);    // replace "Player Names" with "Player Names 2"    workingComp.layer("Player Names").replaceSource(nameCopyComp, true);    // replace "NAME_OUTLINE" with changedOutline    workingComp.layer("NAME_OUTLINE").replaceSource(changedOutline, true);    // replace "PANEL 05" with changedPanel --- may break with duplicate layer names    workingComp.layer("PANEL 05a").replaceSource(changedPanel, true);    workingComp.layer("PANEL 05b").replaceSource(changedPanel, true);    //Replace values in firstname and lastname layers    nameCopyComp.layer("firstname").property("Source Text").setValue(namesList[i][0]);    nameCopyComp.layer("lastname").property("Source Text").setValue(namesList[i][1]);    changedOutline.layer("lastname").property("Source Text").setValue(namesList[i][1]);    // set variables to change name positions based on font size    var firstNamePos = nameCopyComp.layer("firstname").position;    var lastNamePos = nameCopyComp.layer("lastname").position;        //------------------------------------------------------    // all this is necessary to wrangle the syntax to set text properties    // outline text    var textProp = changedOutline.layer("lastname").property("Source Text");    var textDocument = textProp.value;    // myString = "Happy holidays!";    // textDocument.resetCharStyle();    textDocument.fontSize = outlineSize;    // textDocument.fillColor = [1, 0, 0];    // textDocument.strokeColor = [0, 1, 0];    // textDocument.strokeWidth = 2;    // textDocument.font = "TimesNewRomanPSMT";    // textDocument.strokeOverFill = true;    // textDocument.applyStroke = true;    // textDocument.applyFill = true;    // textDocument.text = myString;    // textDocument.justification = ParagraphJustification.CENTER_JUSTIFY;    // textDocument.tracking = 50;    textProp.setValue(textDocument);        // First Name    firstNamePos.setValue(fNamePos);    // Last Name    var textProp = nameCopyComp.layer("lastname").property("Source Text");    var textDocument = textProp.value;    // myString = "Happy holidays!";    // textDocument.resetCharStyle();    textDocument.fontSize = lNamePx;    // textDocument.fillColor = [1, 0, 0];    // textDocument.strokeColor = [0, 1, 0];    // textDocument.strokeWidth = 2;    // textDocument.font = "TimesNewRomanPSMT";    // textDocument.strokeOverFill = true;    // textDocument.applyStroke = true;    // textDocument.applyFill = true;    // textDocument.text = myString;    // textDocument.justification = ParagraphJustification.CENTER_JUSTIFY;    // textDocument.tracking = 50;    textProp.setValue(textDocument);    lastNamePos.setValue(lNamePos);        // WHEW...    //------------------------------------------------------            changedPanel.layer("NAME_OUTLINE").replaceSource(changedOutline, true);        // rename comp to "lastname_firstname"    renderingComp.name = (namesList[i][1] + "_" + namesList[i][0]);    }app.endUndoGroup();