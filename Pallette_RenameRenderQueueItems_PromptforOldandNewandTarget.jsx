/*    This script searches the render queue for items with the word that user specifies (replacableName) in them and changes the word to user inputted word (newName), upper case or mixed case as appropriate        */var proj = app.project;var myRQ = proj.renderQueue;var win = new Window('palette', 'Render Output Changer' ,[300,100,645,300]);var numOM, oldPath, oldName;var replacableName = myRQ.item(1).outputModule(1).file.name;var startDirectory = new Folder (myRQ.item(1).outputModule(1).getSettings()["Output File Info"]["Base Path"]);var newName = "";replacableName = stripExtension(replacableName);if(replacableName == null){    replacableName = "Stanford"    }// var startDirectory = Folder.selectDialog("Please select new destination.");function variableCheck(){ alert("RName: "+replacableName+"\nnewName: "+ newName); }// Start the floating script UI panelvar w = buildUI();if (w != null) {    w.show();}function buildUI() {    if (win != null) {        win.nameSearchLabel = win.add('statictext', [14,10,322,32], 'Text to be replaced:');        win.nameSearchT = win.add('edittext', [25,34,225,56], replacableName);        win.nameSearchT.onChange = function () { replacableName = win.nameSearchT.text; };        win.nameReplaceLabel = win.add('statictext', [14,60,322,75], 'New Text:');        win.nameReplaceT = win.add('edittext', [25,80,225,102], newName);        win.nameReplaceT.onChange = function () { newName = win.nameReplaceT.text; renameRenderQueueItems(newName); };        win.nameTargetLabel = win.add('statictext', [14,114,322,136], 'Target Directory:');        win.nameTargetT = win.add('edittext', [25,140,225,162], startDirectory.fsName);/*        win.nameReplaceT.onChange = function () {             startDirectory.changePath(win.nameReplaceT.text);            doTextChange(win.nameReplaceT, startDirectory.fsName);            doMakeDirIfNotExists();            renameRenderQueueItems(playerName); };*/        win.repDir = win.add('button', [25,168,130,190], 'New Target Dir');        win.repDir.onClick = function () {            getsNewTargetDirectory();            doTextChange(win.nameTargetT, startDirectory.fsName);            renameRenderQueueItems(replacableName);            };                 win.okBtn = win.add('button', [230,140,335,162], 'Save As');         win.okBtn.onClick = function () { doSaving(); };                 win.cancBtn = win.add('button', [230,168,335,190], 'Render');         win.cancBtn.onClick = function () { doRender(); };    }    return win;}function stripExtension(fileNameWithExtension){    return(fileNameWithExtension.split('.')[0]);    }function renameRenderQueueItems(newName){    //newName = Folder.encode(newName);    for(var i = 1; i <= myRQ.numItems; i++){ //steps through every output quque item. Assumes only one output module per item.        for(var j = 1; j <= myRQ.item(i).numOutputModules; j++){                var oldPath = myRQ.item(i).outputModule(j).file.path;                 var oldName = Folder.decode(myRQ.item(i).outputModule(j).file.name);                               // alert(oldPath + "\n" + oldName);                var rqItem1_settable = app.project.renderQueue.item(i).outputModule(j).getSettings();                var subPath = rqItem1_settable["Output File Info"]["Subfolder Path"];                var basePath = rqItem1_settable["Output File Info"]["Base Path"];                // alert(basePath);                 // The substituted value will be contained in the result variable                 alert(oldName + "\n" + replacableName + "\n" + newName);                var result = oldName.replace(replacableName, newName);                 //This is the line that changes the Output To: name                var my_renderSettings = {                "Output File Info":                {                "Base Path":startDirectory.fsName,                "Subfolder Path":subPath,                "File Name":result,                }            };            app.project.renderQueue.item(i).outputModule(j).setSettings( my_renderSettings );            //  myRQ.item(i).outputModule(j).file = new File(oldPath + "/" + amendedName)            }                }}function getsNewTargetDirectory(){    // User selects new Target Directory        startDirectory = Folder.selectDialog("Please select new destination.");}function doTextChange(target, newText) {    // Updates contents of editText box after new file selection        target.text = newText;}function doSaving() {    //Save project with new name    app.project.saveWithDialog();}function doRender(){    // Render    app.project.renderQueue.render();    doRevive();}function doRevive(){        /*  steps through render queue looking for rendered items (status 2619)        duplicates the item, then assigns original path and file info        deletes rendered items, leaving only queued items    */    var doneList = [];    for(var i = 1; i <= myRQ.numItems; i++){        if (app.project.renderQueue.item(i).status == RQItemStatus.DONE){                        var newItem = app.project.renderQueue.item(i).duplicate();            doneList.push(app.project.renderQueue.item(i));            for(var j = 1; j <= myRQ.item(i).numOutputModules; j++){                var oldInfo = myRQ.item(i).outputModule(j).getSettings();                var my_renderSettings = {                    "Output File Info":                        {                        /*"Full Flat Path":oldInfo["Output File Info"]["Full Flat Path"],*/                                                        "Base Path":oldInfo["Output File Info"]["Base Path"],                    "Subfolder Path":oldInfo["Output File Info"]["Subfolder Path"],                    "File Name":oldInfo["Output File Info"]["File Name"],                                                 }                    };                newItem.outputModule(j).setSettings( my_renderSettings );            }        }            }    // alert(doneList.length);    var lengthCopy = doneList.slice();    for(var j = 0; j < lengthCopy.length; j++){        var deleteMe = doneList.shift();        deleteMe.remove();    }    // Refocus Master_Image comp    // masterImageComp.openInViewer();    }